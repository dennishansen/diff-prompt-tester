{
    "1": [
        {
            "request": "Can you refactor 'add numbers' to just 'add'?",
            "distance": 0,
            "correct_files": "PATH:example_files/utils.py\ndef add(num1, num2):\n    return num1 + num2\nPATH:example_files/main.py\nfrom utils import add\n\nnum1 = 5\nnum2 = 10\nresult = add(num1, num2)\nprint(f\"The sum of {num1} and {num2} is {result}.\")",
            "diffed_files": "PATH:example_files/utils.py\ndef add(num1, num2):\n    return num1 + num2\nPATH:example_files/main.py\nfrom utils import add\n\nnum1 = 5\nnum2 = 10\nresult = add(num1, num2)\nprint(f\"The sum of {num1} and {num2} is {result}.\")",
            "diff": ""
        },
        {
            "request": "Can you add a 'subtract' function?",
            "distance": 142,
            "correct_files": "PATH:example_files/utils.py\ndef add_numbers(num1, num2):\n    return num1 + num2\n\ndef subtract_numbers(num1, num2):\n    return num1 - num2\nPATH:example_files/main.py\nfrom utils import add_numbers, subtract_numbers\n\nnum1 = 5\nnum2 = 10\nresult_add = add_numbers(num1, num2)\nresult_subtract = subtract_numbers(num1, num2)\nprint(f\"The sum of {num1} and {num2} is {result_add}.\")\nprint(f\"The difference of {num1} and {num2} is {result_subtract}.\")",
            "diffed_files": "PATH:example_files/utils.py\ndef add_numbers(num1, num2):\n    return num1 + num2\ndef subtract_numbers(num1, num2):\n    return num1 - num2\nPATH:example_files/main.py\nfrom utils import add_numbers\nfrom utils import subtract_numbers\n\nnum1 = 5\nnum2 = 10\nresult = add_numbers(num1, num2)\nprint(f\"The sum of {num1} and {num2} is {result}.\")",
            "diff": "--- \n+++ \n@@ -1,15 +1,13 @@\n PATH:example_files/utils.py\n def add_numbers(num1, num2):\n     return num1 + num2\n-\n def subtract_numbers(num1, num2):\n     return num1 - num2\n PATH:example_files/main.py\n-from utils import add_numbers, subtract_numbers\n+from utils import add_numbers\n+from utils import subtract_numbers\n \n num1 = 5\n num2 = 10\n-result_add = add_numbers(num1, num2)\n-result_subtract = subtract_numbers(num1, num2)\n-print(f\"The sum of {num1} and {num2} is {result_add}.\")\n-print(f\"The difference of {num1} and {num2} is {result_subtract}.\")\n+result = add_numbers(num1, num2)\n+print(f\"The sum of {num1} and {num2} is {result}.\")"
        },
        {
            "request": "Can you add a 'subtract' and a 'multiply' function?",
            "distance": 251,
            "correct_files": "PATH:example_files/utils.py\ndef add_numbers(num1, num2):\n    return num1 + num2\n\ndef subtract_numbers(num1, num2):\n    return num1 - num2\n\ndef multiply_numbers(num1, num2):\n    return num1 * num2\nPATH:example_files/main.py\nfrom utils import add_numbers, subtract_numbers, multiply_numbers\n\nnum1 = 5\nnum2 = 10\nresult_add = add_numbers(num1, num2)\nresult_subtract = subtract_numbers(num1, num2)\nresult_multiply = multiply_numbers(num1, num2)\nprint(f\"The sum of {num1} and {num2} is {result_add}.\")\nprint(f\"The difference of {num1} and {num2} is {result_subtract}.\")\nprint(f\"The product of {num1} and {num2} is {result_multiply}.\")",
            "diffed_files": "PATH:example_files/utils.py\ndef add_numbers(num1, num2):\n    return num1 + num2\ndef subtract_numbers(num1, num2):\n    return num1 - num2\ndef multiply_numbers(num1, num2):\n    return num1 * num2\nPATH:example_files/main.py\nfrom utils import add_numbers\nfrom utils import subtract_numbers, multiply_numbers\n\nnum1 = 5\nnum2 = 10\nresult = add_numbers(num1, num2)\nprint(f\"The sum of {num1} and {num2} is {result}.\")",
            "diff": "--- \n+++ \n@@ -1,20 +1,15 @@\n PATH:example_files/utils.py\n def add_numbers(num1, num2):\n     return num1 + num2\n-\n def subtract_numbers(num1, num2):\n     return num1 - num2\n-\n def multiply_numbers(num1, num2):\n     return num1 * num2\n PATH:example_files/main.py\n-from utils import add_numbers, subtract_numbers, multiply_numbers\n+from utils import add_numbers\n+from utils import subtract_numbers, multiply_numbers\n \n num1 = 5\n num2 = 10\n-result_add = add_numbers(num1, num2)\n-result_subtract = subtract_numbers(num1, num2)\n-result_multiply = multiply_numbers(num1, num2)\n-print(f\"The sum of {num1} and {num2} is {result_add}.\")\n-print(f\"The difference of {num1} and {num2} is {result_subtract}.\")\n-print(f\"The product of {num1} and {num2} is {result_multiply}.\")\n+result = add_numbers(num1, num2)\n+print(f\"The sum of {num1} and {num2} is {result}.\")"
        },
        {
            "request": "Can you allow the add function to add any amount of numbers?",
            "distance": 77,
            "correct_files": "PATH:example_files/utils.py\ndef add_numbers(*args):\n    return sum(args)\n\nPATH:example_files/main.py\nfrom utils import add_numbers\n\nnum1 = 5\nnum2 = 10\nnum3 = 15\nresult = add_numbers(num1, num2, num3)\nprint(f\"The sum of {num1}, {num2}, and {num3} is {result}.\")",
            "diffed_files": "PATH:example_files/utils.py\ndef add_numbers(num1, num2):\ndef add_numbers(*args):\n    return sum(args)\n    return num1 + num2\nPATH:example_files/main.py\nfrom utils import add_numbers\n\nnum1 = 5\nnum2 = 10\nresult = add_numbers(num1, num2, 15, 20)\nprint(f\"The sum of {num1} and {num2} is {result}.\")",
            "diff": "--- \n+++ \n@@ -1,12 +1,12 @@\n PATH:example_files/utils.py\n+def add_numbers(num1, num2):\n def add_numbers(*args):\n     return sum(args)\n-\n+    return num1 + num2\n PATH:example_files/main.py\n from utils import add_numbers\n \n num1 = 5\n num2 = 10\n-num3 = 15\n-result = add_numbers(num1, num2, num3)\n-print(f\"The sum of {num1}, {num2}, and {num3} is {result}.\")\n+result = add_numbers(num1, num2, 15, 20)\n+print(f\"The sum of {num1} and {num2} is {result}.\")"
        },
        {
            "request": "Can you implement a multiply function that uses the add function?",
            "distance": 132,
            "correct_files": "\nPATH:example_files/utils.py\ndef add_numbers(num1, num2):\n    return num1 + num2\n\ndef multiply_using_add(num1, num2):\n    result = 0\n    for _ in range(num2):\n        result = add_numbers(result, num1)\n    return result\n\nPATH:example_files/main.py\nfrom utils import add_numbers, multiply_using_add\n\nnum1 = 5\nnum2 = 10\nsum_result = add_numbers(num1, num2)\nprint(f\"The sum of {num1} and {num2} is {sum_result}.\")\n\nmultiply_result = multiply_using_add(num1, num2)\nprint(f\"The product of {num1} and {num2} is {multiply_result}.\")",
            "diffed_files": "PATH:example_files/utils.py\ndef add_numbers(num1, num2):\n    return num1 + num2\ndef multiply_numbers(num1, num2):\n    result = 0\n    for _ in range(num2):\n        result = add_numbers(result, num1)\n    return result\nPATH:example_files/main.py\nfrom utils import add_numbers\nfrom utils import multiply_numbers\n\n\nnum1 = 5\nresult = multiply_numbers(num1, num2)\nprint(f\"The product of {num1} and {num2} is {result}.\")\nprint(f\"The sum of {num1} and {num2} is {result}.\")",
            "diff": "--- \n+++ \n@@ -1,21 +1,17 @@\n-\n PATH:example_files/utils.py\n def add_numbers(num1, num2):\n     return num1 + num2\n-\n-def multiply_using_add(num1, num2):\n+def multiply_numbers(num1, num2):\n     result = 0\n     for _ in range(num2):\n         result = add_numbers(result, num1)\n     return result\n+PATH:example_files/main.py\n+from utils import add_numbers\n+from utils import multiply_numbers\n \n-PATH:example_files/main.py\n-from utils import add_numbers, multiply_using_add\n \n num1 = 5\n-num2 = 10\n-sum_result = add_numbers(num1, num2)\n-print(f\"The sum of {num1} and {num2} is {sum_result}.\")\n-\n-multiply_result = multiply_using_add(num1, num2)\n-print(f\"The product of {num1} and {num2} is {multiply_result}.\")\n+result = multiply_numbers(num1, num2)\n+print(f\"The product of {num1} and {num2} is {result}.\")\n+print(f\"The sum of {num1} and {num2} is {result}.\")"
        },
        {
            "request": "Can you implement a factorial function?",
            "distance": 127,
            "correct_files": "PATH:example_files/utils.py\ndef add_numbers(num1, num2):\n    return num1 + num2\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\nPATH:example_files/main.py\nfrom utils import add_numbers, factorial\n\nnum1 = 5\nnum2 = 10\nresult = add_numbers(num1, num2)\nprint(f\"The sum of {num1} and {num2} is {result}.\")\n\nnum3 = 6\nfactorial_result = factorial(num3)\nprint(f\"The factorial of {num3} is {factorial_result}.\")",
            "diffed_files": "PATH:example_files/utils.py\ndef add_numbers(num1, num2):\n    return num1 + num2\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nPATH:example_files/main.py\nfrom utils import add_numbers\nfrom utils import factorial\n\n\nnum1 = 5\nnum2 = 10\nresult = add_numbers(num1, num2)\nfactorial_result = factorial(5)\nprint(f\"The factorial of 5 is {factorial_result}.\")\nprint(f\"The sum of {num1} and {num2} is {result}.\")",
            "diff": "--- \n+++ \n@@ -1,20 +1,19 @@\n PATH:example_files/utils.py\n def add_numbers(num1, num2):\n     return num1 + num2\n-\n def factorial(n):\n-    if n == 0 or n == 1:\n+    if n == 0:\n         return 1\n     else:\n-        return n * factorial(n - 1)\n+        return n * factorial(n-1)\n PATH:example_files/main.py\n-from utils import add_numbers, factorial\n+from utils import add_numbers\n+from utils import factorial\n+\n \n num1 = 5\n num2 = 10\n result = add_numbers(num1, num2)\n+factorial_result = factorial(5)\n+print(f\"The factorial of 5 is {factorial_result}.\")\n print(f\"The sum of {num1} and {num2} is {result}.\")\n-\n-num3 = 6\n-factorial_result = factorial(num3)\n-print(f\"The factorial of {num3} is {factorial_result}.\")"
        },
        {
            "request": "Can you implement a power function?",
            "distance": 143,
            "correct_files": "FILE_START:example_files/utils.py\ndef add_numbers(num1, num2):\n    return num1 + num2\n\ndef power(base, exponent):\n    return base ** exponent\nFILE_START:example_files/main.py\nfrom utils import add_numbers, power\n\nnum1 = 5\nnum2 = 10\nresult = add_numbers(num1, num2)\nprint(f\"The sum of {num1} and {num2} is {result}.\")\n\nbase = 2\nexponent = 3\npower_result = power(base, exponent)\nprint(f\"{base} raised to the power of {exponent} is {power_result}.\")",
            "diffed_files": "PATH:example_files/utils.py\ndef add_numbers(num1, num2):\n    return num1 + num2\ndef power(base, exponent):\n    return base ** exponent\nPATH:example_files/main.py\nfrom utils import add_numbers\nfrom utils import power\n\n\nnum1 = 5\nnum2 = 10\nresult = add_numbers(num1, num2)\nbase = 2\nexponent = 3\npower_result = power(base, exponent)\nprint(f\"{base} raised to the power of {exponent} is {power_result}.\")\nprint(f\"The sum of {num1} and {num2} is {result}.\")",
            "diff": "--- \n+++ \n@@ -1,18 +1,18 @@\n-FILE_START:example_files/utils.py\n+PATH:example_files/utils.py\n def add_numbers(num1, num2):\n     return num1 + num2\n-\n def power(base, exponent):\n     return base ** exponent\n-FILE_START:example_files/main.py\n-from utils import add_numbers, power\n+PATH:example_files/main.py\n+from utils import add_numbers\n+from utils import power\n+\n \n num1 = 5\n num2 = 10\n result = add_numbers(num1, num2)\n-print(f\"The sum of {num1} and {num2} is {result}.\")\n-\n base = 2\n exponent = 3\n power_result = power(base, exponent)\n print(f\"{base} raised to the power of {exponent} is {power_result}.\")\n+print(f\"The sum of {num1} and {num2} is {result}.\")"
        },
        {
            "request": "Can you implement a fibonacci function?",
            "distance": 71,
            "correct_files": "PATH:example_files/utils.py\ndef add_numbers(num1, num2):\n    return num1 + num2\n\ndef fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\nPATH:example_files/main.py\nfrom utils import add_numbers, fibonacci\n\nnum1 = 5\nnum2 = 10\nresult = add_numbers(num1, num2)\nprint(f\"The sum of {num1} and {num2} is {result}.\")\n\nfib_num = 7\nfib_result = fibonacci(fib_num)\nprint(f\"The {fib_num}th number in the Fibonacci sequence is {fib_result}.\")",
            "diffed_files": "PATH:example_files/utils.py\ndef add_numbers(num1, num2):\n    return num1 + num2\ndef fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\nPATH:example_files/main.py\nfrom utils import add_numbers\n\nfrom utils import fibonacci\n\nnum1 = 5\nnum2 = 10\nresult = add_numbers(num1, num2)\nprint(f\"The sum of {num1} and {num2} is {result}.\")\nfib_result = fibonacci(10)\nprint(f\"The 10th fibonacci number is {fib_result}.\")",
            "diff": "--- \n+++ \n@@ -1,7 +1,6 @@\n PATH:example_files/utils.py\n def add_numbers(num1, num2):\n     return num1 + num2\n-\n def fibonacci(n):\n     if n <= 0:\n         return 0\n@@ -10,13 +9,13 @@\n     else:\n         return fibonacci(n - 1) + fibonacci(n - 2)\n PATH:example_files/main.py\n-from utils import add_numbers, fibonacci\n+from utils import add_numbers\n+\n+from utils import fibonacci\n \n num1 = 5\n num2 = 10\n result = add_numbers(num1, num2)\n print(f\"The sum of {num1} and {num2} is {result}.\")\n-\n-fib_num = 7\n-fib_result = fibonacci(fib_num)\n-print(f\"The {fib_num}th number in the Fibonacci sequence is {fib_result}.\")\n+fib_result = fibonacci(10)\n+print(f\"The 10th fibonacci number is {fib_result}.\")"
        },
        {
            "request": "Can you implement a prime number detector?",
            "distance": 147,
            "correct_files": "PATH:example_files/utils.py\ndef add_numbers(num1, num2):\n    return num1 + num2\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\nPATH:example_files/main.py\nfrom utils import add_numbers, is_prime\n\nnum1 = 5\nnum2 = 10\nresult = add_numbers(num1, num2)\nprint(f\"The sum of {num1} and {num2} is {result}.\")\n\nprime_num = 7\nif is_prime(prime_num):\n    print(f\"{prime_num} is a prime number.\")\nelse:\n    print(f\"{prime_num} is not a prime number.\")",
            "diffed_files": "PATH:example_files/utils.py\ndef add_numbers(num1, num2):\n    return num1 + num2\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\nPATH:example_files/main.py\nfrom utils import add_numbers\nfrom utils import is_prime\n\n\nnum1 = 5\nnum2 = 10\nresult = add_numbers(num1, num2)\n\nprime_check = is_prime(num1)\nprint(f\"{num1} is a prime number: {prime_check}.\")\nprint(f\"The sum of {num1} and {num2} is {result}.\")",
            "diff": "--- \n+++ \n@@ -10,15 +10,14 @@\n             return False\n     return True\n PATH:example_files/main.py\n-from utils import add_numbers, is_prime\n+from utils import add_numbers\n+from utils import is_prime\n+\n \n num1 = 5\n num2 = 10\n result = add_numbers(num1, num2)\n+\n+prime_check = is_prime(num1)\n+print(f\"{num1} is a prime number: {prime_check}.\")\n print(f\"The sum of {num1} and {num2} is {result}.\")\n-\n-prime_num = 7\n-if is_prime(prime_num):\n-    print(f\"{prime_num} is a prime number.\")\n-else:\n-    print(f\"{prime_num} is not a prime number.\")"
        }
    ]
}