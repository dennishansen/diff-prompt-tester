[
    {
        "name": "benchmark",
        "prompt": "# Overview\n\nYou are a programming assistant that helps users modify their code and text files accurately. You will receive requests including user messages and the contents of their files. Address the user's request in a response that includes a message and precise file changes in the specified format. Be as accurate as possible. Adhere to the format. Do not include anything else in the response.\n\n# Request\n\nAn incoming request will be in the following format:\n\nMESSAGE:Request message\nFILE_START:path/to/file1.js\n1:A line\n2:Line to be removed\n3:Even another line\n\n# Response\n\nAn outgoing response will be in the following format:\n\nMESSAGE:Response message\nEDIT_FILE:path/to/file1.js\nHUNK_START:1\nA line\n-Line to be removed\n+Added line\nEven another line\n\nNotes:\n- Include a few lines before and after changed lines for context\n- Maintain tabs and spaces",
        "parsers": [
            {
                "name": "benchmark",
                "parser": "import json\nfrom source.debug import debug\n\ndef get_changes(response_string):\n    lines = response_string.strip().split(\"\\n\")\n    message = lines.pop(0).split(\":\")[1].strip()\n    diff_raw = \"\\n\".join(lines)\n    changes = []\n\n    current_file = None\n    current_hunk = {}\n\n    for line in lines:\n        if line.startswith(\"EDIT_FILE\"):\n            if current_file:\n                if current_hunk:\n                    current_file[\"hunks\"].append(current_hunk)\n                    current_hunk = {}\n                changes.append(current_file)\n            current_file = {\"filePath\": line.split(\":\")[1].strip(), \"hunks\": []}\n        elif line.startswith(\"HUNK_START\"):\n            if current_hunk:\n                current_file[\"hunks\"].append(current_hunk)\n            current_hunk = {\"hunkStart\": int(line.split(\":\")[1]), \"lines\": []}\n        elif line.startswith(\"-\"):\n            if current_hunk:\n                current_hunk[\"lines\"].append({\"type\": \"delete\", \"content\": line[1:]})\n        elif line.startswith(\"+\"):\n            if current_hunk:\n                current_hunk[\"lines\"].append({\"type\": \"add\", \"content\": line[1:]})\n        else:\n            if current_hunk:\n                current_hunk[\"lines\"].append({\"type\": \"context\", \"content\": line})\n\n    if current_hunk and current_hunk[\"lines\"]:\n        current_file[\"hunks\"].append(current_hunk)\n    if current_file:\n        changes.append(current_file)\n\n    return changes, message, diff_raw\n\ndef apply_diff(file_contents, changes):\n    new_file_contents = []\n    for file in file_contents:\n        file_path = file[\"filePath\"]\n        file_content = file[\"content\"]\n        file_changes = next(c for c in changes if c[\"filePath\"] == file_path)\n        original_lines = file_content.split(\"\\n\")\n        new_lines = []\n        original_line_index = 0\n\n        for hunk in file_changes[\"hunks\"]:\n            # Add unchanged lines before the current hunk\n            while original_line_index < hunk[\"hunkStart\"] - 1:\n                new_lines.append(original_lines[original_line_index])\n                original_line_index += 1\n\n            for line in hunk[\"lines\"]:\n                if line[\"type\"] == \"delete\":\n                    original_line_index += 1\n                elif line[\"type\"] == \"add\":\n                    new_lines.append(line[\"content\"])\n                else:\n                    if original_line_index < len(original_lines):\n                        new_lines.append(original_lines[original_line_index])\n                    original_line_index += 1\n\n        # Add remaining unchanged lines after the last hunk\n        while original_line_index < len(original_lines):\n            new_lines.append(original_lines[original_line_index])\n            original_line_index += 1\n\n        new_content = \"\\n\".join(new_lines)\n        new_file_contents.append({\"filePath\": file_path, \"content\": new_content})\n    return new_file_contents\n\ndef parse(response, file_contents):\n    changes, message, diff_raw = get_changes(response)\n    debug(f\"Diff Changes:\\n{json.dumps(changes, indent=4)}\")\n\n    diffed_files = apply_diff(file_contents, changes)\n    debug(f\"Diffed File Contents:\\n{json.dumps(diffed_files, indent=4)}\")\n\n    return diffed_files, message, diff_raw"
            }
        ]
    },
    {
        "name": "end_hunk_line",
        "prompt": "# Overview\n\nYou are a programming assistant that helps users modify their code and text files accurately.\nYou will receive requests including user messages and the contents of their files.\nAddress the user's request in a response that includes a message and precise file changes in the specified format.\nBe as accurate as possible.\nAdhere to the format. Do not include anything else in the response.\n\n# Request\n\nAn incoming request will be in the following format:\n\nMESSAGE:Request message\nFILE_START:path/to/file1.js\n1:A line\n2:Line to be removed\n3:Even another line\n\n# Response\n\nAn outgoing response will be in the following format:\n\nMESSAGE:Response message\nEDIT_FILE:path/to/file1.js\nHUNK:<start line of old files>-<end line of old files>\nA line\n-Line to be removed\n+Added line\nEven another line\n\nNotes:\n- Include a few lines before and after changed lines for context\n- Maintain tabs and spaces",
        "parsers": [
            {
                "name": "end_hunk_line",
                "parser": "import json\nfrom source.debug import debug\n\ndef get_changes(response_string):\n    lines = response_string.strip().split(\"\\n\")\n    message = lines.pop(0).split(\":\")[1].strip()\n    diff_raw = \"\\n\".join(lines)\n    changes = []\n\n    current_file = None\n    current_hunk = {}\n\n    for line in lines:\n        if line.startswith(\"EDIT_FILE\"):\n            if current_file:\n                if current_hunk:\n                    current_file[\"hunks\"].append(current_hunk)\n                    current_hunk = {}\n                changes.append(current_file)\n            current_file = {\"filePath\": line.split(\":\")[1].strip(), \"hunks\": []}\n        elif line.startswith(\"HUNK\"):\n            if current_hunk:\n                current_file[\"hunks\"].append(current_hunk)\n            range_string = line.split(':')[1]\n            hunk_start, hunk_end = map(int, range_string.split('-'))\n            current_hunk = {\"hunk_start\": hunk_start, \"hunk_end\": hunk_end, \"lines\": []}\n        elif line.startswith(\"-\"):\n            if current_hunk:\n                current_hunk[\"lines\"].append({\"type\": \"delete\", \"content\": line[1:]})\n        elif line.startswith(\"+\"):\n            if current_hunk:\n                current_hunk[\"lines\"].append({\"type\": \"add\", \"content\": line[1:]})\n        else:\n            if current_hunk:\n                current_hunk[\"lines\"].append({\"type\": \"context\", \"content\": line})\n\n    if current_hunk and current_hunk[\"lines\"]:\n        current_file[\"hunks\"].append(current_hunk)\n    if current_file:\n        changes.append(current_file)\n\n    return changes, message, diff_raw\n\ndef apply_diff(file_contents, changes):\n    new_file_contents = []\n    for file in file_contents:\n        file_path = file[\"filePath\"]\n        file_content = file[\"content\"]\n        file_changes = next(c for c in changes if c[\"filePath\"] == file_path)\n        original_lines = file_content.split(\"\\n\")\n        original_line_index = 0\n        new_lines = []\n\n        for hunk in file_changes[\"hunks\"]:\n            hunk_start = hunk[\"hunk_start\"]\n            hunk_end = hunk[\"hunk_end\"]\n\n            # Add unchanged lines before the current hunk\n            while original_line_index < original_line_index + hunk_start - 1:\n                new_lines.append(original_lines[original_line_index])\n\n            for line in hunk[\"lines\"]:\n                if line[\"type\"] == \"add\":\n                    new_lines.append(line[\"content\"])\n                else:\n                    if original_line_index < len(original_lines):\n                        new_lines.append(line[\"content\"])\n\n            # Update index\n            original_line_index = original_line_index + hunk_end\n\n        # Add remaining unchanged lines after the last hunk\n        while original_line_index < len(original_lines):\n            new_lines.append(original_lines[original_line_index])\n            original_line_index += 1\n\n        new_content = \"\\n\".join(new_lines)\n        new_file_contents.append({\"filePath\": file_path, \"content\": new_content})\n    return new_file_contents\n\ndef parse(response, file_contents):\n    changes, message, diff_raw = get_changes(response)\n    debug(f\"Diff Changes:\\n{json.dumps(changes, indent=4)}\")\n\n    diffed_files = apply_diff(file_contents, changes)\n    debug(f\"Diffed File Contents:\\n{json.dumps(diffed_files, indent=4)}\")\n\n    return diffed_files, message, diff_raw"
            }
        ]
    }
]